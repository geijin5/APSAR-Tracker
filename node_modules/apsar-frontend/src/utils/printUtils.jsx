import { createRoot } from 'react-dom/client';
import PrintLayout from '../components/PrintLayout';
import { formatDate } from './dateUtils';

export const printDocument = (component, title = 'Document') => {
  // Create a new window for printing
  const printWindow = window.open('', '_blank', 'width=800,height=600');
  
  if (!printWindow) {
    alert('Print window blocked. Please allow popups for this site.');
    return;
  }

  // Create the HTML structure
  printWindow.document.write(`
    <!DOCTYPE html>
    <html>
      <head>
        <title>${title}</title>
        <meta charset="UTF-8">
        <style>
          body { margin: 0; padding: 0; font-family: Arial, sans-serif; }
          .no-print { display: none !important; }
        </style>
      </head>
      <body>
        <div id="print-root"></div>
      </body>
    </html>
  `);
  
  printWindow.document.close();

  // Wait for the document to be ready
  printWindow.addEventListener('load', () => {
    const container = printWindow.document.getElementById('print-root');
    const root = createRoot(container);
    
    // Render the component
    root.render(component);
    
    // Small delay to ensure rendering is complete
    setTimeout(() => {
      printWindow.print();
      printWindow.close();
    }, 500);
  });
};

export const generatePrintableChecklist = (checklist, templateData, headerInfo = {}) => {
  return (
    <PrintLayout
      title="Equipment Checklist"
      subtitle={templateData?.name}
      headerInfo={headerInfo}
      footer="This document was generated by APSAR Tracker"
    >
      <div>
        {templateData?.description && (
          <p style={{ marginBottom: '20px', fontStyle: 'italic' }}>
            {templateData.description}
          </p>
        )}
        
        <div style={{ marginBottom: '20px' }}>
          <strong>Instructions:</strong> Check each item as completed. Add notes in the space provided where necessary.
        </div>

        {checklist
          ?.sort((a, b) => (a.order || 0) - (b.order || 0))
          .map((item, index) => (
            <div key={index} className="print-checklist-item">
              <div className={`print-checkbox ${item.completed ? 'checked' : ''}`}></div>
              <div style={{ flex: 1 }}>
                <div style={{ fontWeight: item.required ? 'bold' : 'normal' }}>
                  {item.item || item.title}
                  {item.required && <span style={{ color: 'red' }}> *</span>}
                </div>
                
                {item.description && (
                  <div style={{ fontSize: '11pt', color: '#666', margin: '3px 0' }}>
                    {item.description}
                  </div>
                )}
                
                {item.category && (
                  <div style={{ fontSize: '10pt', color: '#888', marginBottom: '5px' }}>
                    Category: {item.category}
                  </div>
                )}
                
                <div style={{ marginTop: '8px', borderBottom: '1px dotted #ccc', minHeight: '20px' }}>
                  {item.notes && (
                    <span style={{ fontSize: '11pt' }}>Notes: {item.notes}</span>
                  )}
                </div>
              </div>
            </div>
          ))}

        <div style={{ marginTop: '30px', fontSize: '10pt', fontStyle: 'italic' }}>
          * Required items must be completed
        </div>

        <div style={{ marginTop: '40px' }}>
          <table className="print-table" style={{ width: '100%' }}>
            <thead>
              <tr>
                <th>Completed By</th>
                <th>Date</th>
                <th>Time</th>
                <th>Signature</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td style={{ height: '40px' }}></td>
                <td></td>
                <td></td>
                <td></td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </PrintLayout>
  );
};

export const generatePrintableMaintenanceRecord = (record) => {
  return (
    <PrintLayout
      title="Maintenance Record"
      subtitle={`${record.asset?.name} - ${record.title}`}
      headerInfo={{
        'Record ID': record._id?.slice(-8) || 'N/A',
        'Asset Number': record.asset?.assetNumber || 'N/A',
        'Type': record.type || 'N/A',
        'Priority': record.priority || 'N/A',
        'Status': record.status || 'N/A',
        'Scheduled Date': formatDate(record.scheduledDate),
        'Due Date': formatDate(record.dueDate),
        'Completed Date': formatDate(record.completedDate),
        'Performed By': record.performedBy ? `${record.performedBy.firstName} ${record.performedBy.lastName}` : 'N/A'
      }}
      footer="This document was generated by APSAR Tracker"
    >
      <div>
        {record.description && (
          <div style={{ marginBottom: '20px' }}>
            <h3>Description</h3>
            <p>{record.description}</p>
          </div>
        )}

        {record.checklist && record.checklist.length > 0 && (
          <div style={{ marginBottom: '20px' }}>
            <h3>Checklist</h3>
            {record.checklist.map((item, index) => (
              <div key={index} className="print-checklist-item">
                <div className={`print-checkbox ${item.completed ? 'checked' : ''}`}></div>
                <div style={{ flex: 1 }}>
                  <div>{item.item}</div>
                  {item.notes && (
                    <div style={{ fontSize: '11pt', color: '#666', marginLeft: '20px' }}>
                      Notes: {item.notes}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}

        {record.partsUsed && record.partsUsed.length > 0 && (
          <div style={{ marginBottom: '20px' }}>
            <h3>Parts Used</h3>
            <table className="print-table">
              <thead>
                <tr>
                  <th>Part Name</th>
                  <th>Part Number</th>
                  <th>Quantity</th>
                  <th>Unit Cost</th>
                  <th>Total Cost</th>
                </tr>
              </thead>
              <tbody>
                {record.partsUsed.map((part, index) => (
                  <tr key={index}>
                    <td>{part.name}</td>
                    <td>{part.partNumber || 'N/A'}</td>
                    <td>{part.quantity}</td>
                    <td>{part.unitCost ? `$${part.unitCost.toFixed(2)}` : 'N/A'}</td>
                    <td>{part.totalCost ? `$${part.totalCost.toFixed(2)}` : 'N/A'}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        <div style={{ marginBottom: '20px' }}>
          <h3>Summary</h3>
          <table className="print-table">
            <tbody>
              {record.laborHours && (
                <tr>
                  <td><strong>Labor Hours</strong></td>
                  <td>{record.laborHours}</td>
                </tr>
              )}
              {record.laborCost && (
                <tr>
                  <td><strong>Labor Cost</strong></td>
                  <td>${record.laborCost.toFixed(2)}</td>
                </tr>
              )}
              {record.totalCost && (
                <tr>
                  <td><strong>Total Cost</strong></td>
                  <td><strong>${record.totalCost.toFixed(2)}</strong></td>
                </tr>
              )}
              {record.vendor && (
                <tr>
                  <td><strong>Vendor</strong></td>
                  <td>{record.vendor}</td>
                </tr>
              )}
              {record.invoiceNumber && (
                <tr>
                  <td><strong>Invoice Number</strong></td>
                  <td>{record.invoiceNumber}</td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        {record.notes && (
          <div style={{ marginBottom: '20px' }}>
            <h3>Additional Notes</h3>
            <p style={{ whiteSpace: 'pre-wrap' }}>{record.notes}</p>
          </div>
        )}
      </div>
    </PrintLayout>
  );
};

export const generatePrintableWorkOrder = (workOrder) => {
  return (
    <PrintLayout
      title="Work Order"
      subtitle={`${workOrder.asset?.name} - ${workOrder.title}`}
      headerInfo={{
        'Work Order #': workOrder.workOrderNumber || 'N/A',
        'Asset Number': workOrder.asset?.assetNumber || 'N/A',
        'Priority': workOrder.priority || 'N/A',
        'Status': workOrder.status || 'N/A',
        'Category': workOrder.category || 'N/A',
        'Requested By': workOrder.requestedBy ? `${workOrder.requestedBy.firstName} ${workOrder.requestedBy.lastName}` : 'N/A',
        'Assigned To': workOrder.assignedTo ? `${workOrder.assignedTo.firstName} ${workOrder.assignedTo.lastName}` : 'Unassigned',
        'Scheduled Start': formatDate(workOrder.scheduledStartDate),
        'Scheduled End': formatDate(workOrder.scheduledEndDate)
      }}
      footer="This document was generated by APSAR Tracker"
    >
      <div>
        <div style={{ marginBottom: '20px' }}>
          <h3>Description</h3>
          <p>{workOrder.description || 'No description provided'}</p>
        </div>

        {workOrder.tags && workOrder.tags.length > 0 && (
          <div style={{ marginBottom: '20px' }}>
            <h3>Tags</h3>
            <p>{workOrder.tags.join(', ')}</p>
          </div>
        )}

        <div style={{ marginBottom: '20px' }}>
          <h3>Cost Information</h3>
          <table className="print-table">
            <tbody>
              <tr>
                <td><strong>Estimated Cost</strong></td>
                <td>{workOrder.estimatedCost ? `$${workOrder.estimatedCost.toFixed(2)}` : 'N/A'}</td>
              </tr>
              <tr>
                <td><strong>Actual Cost</strong></td>
                <td>{workOrder.actualCost ? `$${workOrder.actualCost.toFixed(2)}` : 'N/A'}</td>
              </tr>
            </tbody>
          </table>
        </div>

        {workOrder.notes && workOrder.notes.length > 0 && (
          <div style={{ marginBottom: '20px' }}>
            <h3>Notes</h3>
            {workOrder.notes.map((note, index) => (
              <div key={index} style={{ marginBottom: '10px', padding: '10px', border: '1px solid #ccc' }}>
                <div style={{ fontSize: '11pt', color: '#666' }}>
                  {note.author?.firstName} {note.author?.lastName} - {formatDate(note.createdAt)}
                </div>
                <p>{note.text}</p>
              </div>
            ))}
          </div>
        )}

        {workOrder.completedNotes && (
          <div style={{ marginBottom: '20px' }}>
            <h3>Completion Notes</h3>
            <p style={{ whiteSpace: 'pre-wrap' }}>{workOrder.completedNotes}</p>
          </div>
        )}

        <div style={{ marginTop: '40px' }}>
          <h3>Approval</h3>
          <table className="print-table">
            <thead>
              <tr>
                <th>Completed By</th>
                <th>Date</th>
                <th>Time</th>
                <th>Signature</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td style={{ height: '40px' }}></td>
                <td></td>
                <td></td>
                <td></td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </PrintLayout>
  );
};

export const generatePrintableQuote = (quote) => {
  return (
    <PrintLayout
      title="Maintenance Quote"
      subtitle={`${quote.asset?.name} - ${quote.title}`}
      headerInfo={{
        'Quote ID': quote._id?.slice(-8) || 'N/A',
        'Asset Number': quote.asset?.assetNumber || 'N/A',
        'Priority': quote.priority || 'N/A',
        'Status': quote.status || 'N/A',
        'Vendor': quote.vendor || 'N/A',
        'Created Date': formatDate(quote.createdAt),
        'Valid Until': formatDate(quote.validUntil)
      }}
      footer="This document was generated by APSAR Tracker"
    >
      <div>
        <div style={{ marginBottom: '20px' }}>
          <h3>Description</h3>
          <p>{quote.description || 'No description provided'}</p>
        </div>

        {quote.items && quote.items.length > 0 && (
          <div style={{ marginBottom: '20px' }}>
            <h3>Quote Items</h3>
            <table className="print-table">
              <thead>
                <tr>
                  <th>Description</th>
                  <th>Quantity</th>
                  <th>Unit Cost</th>
                  <th>Total</th>
                </tr>
              </thead>
              <tbody>
                {quote.items.map((item, index) => (
                  <tr key={index}>
                    <td>{item.description}</td>
                    <td>{item.quantity}</td>
                    <td>{item.unitCost ? `$${item.unitCost.toFixed(2)}` : 'N/A'}</td>
                    <td>{item.totalCost ? `$${item.totalCost.toFixed(2)}` : 'N/A'}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        <div style={{ marginBottom: '20px' }}>
          <h3>Cost Summary</h3>
          <table className="print-table">
            <tbody>
              <tr>
                <td><strong>Subtotal</strong></td>
                <td>{quote.subtotal ? `$${quote.subtotal.toFixed(2)}` : 'N/A'}</td>
              </tr>
              <tr>
                <td><strong>Tax</strong></td>
                <td>{quote.tax ? `$${quote.tax.toFixed(2)}` : 'N/A'}</td>
              </tr>
              <tr>
                <td><strong>Total Cost</strong></td>
                <td><strong>{quote.totalCost ? `$${quote.totalCost.toFixed(2)}` : 'N/A'}</strong></td>
              </tr>
            </tbody>
          </table>
        </div>

        {quote.notes && (
          <div style={{ marginBottom: '20px' }}>
            <h3>Additional Notes</h3>
            <p style={{ whiteSpace: 'pre-wrap' }}>{quote.notes}</p>
          </div>
        )}

        <div style={{ marginTop: '40px' }}>
          <h3>Approval</h3>
          <table className="print-table">
            <thead>
              <tr>
                <th>Approved By</th>
                <th>Date</th>
                <th>Signature</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td style={{ height: '40px' }}></td>
                <td></td>
                <td></td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </PrintLayout>
  );
};

export const generatePrintableReport = (reportData, reportType, filters = {}) => {
  const getReportTitle = (type) => {
    switch (type) {
      case 'assets': return 'Asset Report';
      case 'maintenance': return 'Maintenance Report';
      case 'workorders': return 'Work Orders Report';
      case 'summary': return 'Summary Report';
      default: return 'System Report';
    }
  };

  return (
    <PrintLayout
      title={getReportTitle(reportType)}
      headerInfo={{
        'Report Type': reportType,
        'Generated By': 'APSAR Tracker System',
        ...filters
      }}
      footer="This document was generated by APSAR Tracker"
    >
      <div>
        {reportType === 'assets' && reportData?.assets && (
          <div>
            <h3>Asset Summary</h3>
            <table className="print-table">
              <thead>
                <tr>
                  <th>Asset Number</th>
                  <th>Name</th>
                  <th>Category</th>
                  <th>Status</th>
                  <th>Location</th>
                </tr>
              </thead>
              <tbody>
                {reportData.assets.map((asset, index) => (
                  <tr key={index}>
                    <td>{asset.assetNumber}</td>
                    <td>{asset.name}</td>
                    <td>{asset.category}</td>
                    <td>{asset.status}</td>
                    <td>{asset.currentLocation || 'N/A'}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {reportType === 'maintenance' && reportData?.maintenance && (
          <div>
            <h3>Maintenance Records</h3>
            <table className="print-table">
              <thead>
                <tr>
                  <th>Asset</th>
                  <th>Type</th>
                  <th>Status</th>
                  <th>Due Date</th>
                  <th>Completed</th>
                </tr>
              </thead>
              <tbody>
                {reportData.maintenance.map((record, index) => (
                  <tr key={index}>
                    <td>{record.asset?.name || 'N/A'}</td>
                    <td>{record.type}</td>
                    <td>{record.status}</td>
                    <td>{formatDate(record.dueDate)}</td>
                    <td>{formatDate(record.completedDate)}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {reportType === 'summary' && (
          <div>
            <h3>System Summary</h3>
            <table className="print-table">
              <tbody>
                <tr>
                  <td><strong>Total Assets</strong></td>
                  <td>{reportData?.assets?.total || 0}</td>
                </tr>
                <tr>
                  <td><strong>Operational Assets</strong></td>
                  <td>{reportData?.assets?.operational || 0}</td>
                </tr>
                <tr>
                  <td><strong>Assets in Maintenance</strong></td>
                  <td>{reportData?.assets?.maintenance || 0}</td>
                </tr>
                <tr>
                  <td><strong>Completed Maintenance</strong></td>
                  <td>{reportData?.maintenance?.completed || 0}</td>
                </tr>
                <tr>
                  <td><strong>Overdue Maintenance</strong></td>
                  <td>{reportData?.maintenance?.overdue || 0}</td>
                </tr>
                <tr>
                  <td><strong>Open Work Orders</strong></td>
                  <td>{reportData?.workOrders?.open || 0}</td>
                </tr>
                <tr>
                  <td><strong>Completed Work Orders</strong></td>
                  <td>{reportData?.workOrders?.completed || 0}</td>
                </tr>
              </tbody>
            </table>
          </div>
        )}
      </div>
    </PrintLayout>
  );
};
